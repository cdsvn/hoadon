<?phpif (!defined('BASEPATH'))    exit('No direct script access allowed');/*  | -------------------------------------------------------------------  | @author Nguyen Tat Huy  | @copyright 2015  | ------------------------------------------------------------------- */include(APPPATH . 'libraries/Template' . EXT);class Site extends Template {    var $config;    var $time_exit = 0;    var $CI;    var $action;    var $login;    var $lang = '';    function __construct() {        parent::__construct('frontend');        $this->set_master_template();        $f = $this->CI->uri->segment(1);        if ($f == '') {            redirect('index');        }        $lang = 'vn';        $this->lang = $lang;        CI::$APP->config->set_item('language', $lang);        //$this->CI->load->model('Admin_model');        //CI::$APP->config->set_item('config', $this->CI->Admin_model->get_config());        $this->add_region('copyright');        $this->write('copyright', "© Copyright 2015 | Nguyen Tat Huy", true);        $this->write('title', "Custom Codeigniter", true);    }    /*     * Run the master template or a single region     *     * @access	public     * @param	string	the name of the "view" file to be included.     * @param	string	optionally opt to render a specific region     * @param	boolean	FALSE to output the rendered template, TRUE to return as a string. Always TRUE when $region is supplied     * @return	void or string (result of template build)     */    function run($file, $data = NULL, $region = NULL, $buffer = FALSE, $parse = FALSE) {        $content = $this->CI->load->view($file, $data, true);        $this->write('content', $content);        $this->render($region, $buffer, $parse);    }    function friendlyUrl($str) {        $unicode = array(            'a' => 'á|à|ả|ã|ạ|ă|ắ|ặ|ằ|ẳ|ẵ|â|ấ|ầ|ẩ|ẫ|ậ',            'd' => 'đ',            'e' => 'é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ',            'i' => 'í|ì|ỉ|ĩ|ị',            'o' => 'ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ',            'u' => 'ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự',            'y' => 'ý|ỳ|ỷ|ỹ|ỵ',            'A' => 'Á|À|Ả|Ã|Ạ|Ă|Ắ|Ặ|Ằ|Ẳ|Ẵ|Â|Ấ|Ầ|Ẩ|Ẫ|Ậ',            'D' => 'Đ',            'E' => 'É|È|Ẻ|Ẽ|Ẹ|Ê|Ế|Ề|Ể|Ễ|Ệ',            'I' => 'Í|Ì|Ỉ|Ĩ|Ị',            'O' => 'Ó|Ò|Ỏ|Õ|Ọ|Ô|Ố|Ồ|Ổ|Ỗ|Ộ|Ơ|Ớ|Ờ|Ở|Ỡ|Ợ',            'U' => 'Ú|Ù|Ủ|Ũ|Ụ|Ư|Ứ|Ừ|Ử|Ữ|Ự',            'Y' => 'Ý|Ỳ|Ỷ|Ỹ|Ỵ',        );        foreach ($unicode as $nonUnicode => $uni) {            $str = preg_replace("/($uni)/i", $nonUnicode, $str); // loc dau tieng Viet        }        $str = preg_replace('/[^a-zA-Z0-9\\s-_]/', '', $str); // loai bo cac ky tu khong phai la chu hoac so tru khoang trang, dau - hoac _        $str = trim($str); // loc khoang trang dau chuoi        $str = preg_replace('([\s]+)', '-', $str); // chuyen 1 hoạc nhieu nhieu khoang trang thanh 1 dau gach ngang        $str = preg_replace('([-]+)', '-', $str); // chuyen nhieu dau - thanh 1 dau -        return strtolower($str);    }}function url_tmpl() {    $site = new Site();    return base_url() . $site->path;}function configs($key) {    $config = CI::$APP->config->config['config'];    return isset($config[$key]) ? $config[$key] : '';}